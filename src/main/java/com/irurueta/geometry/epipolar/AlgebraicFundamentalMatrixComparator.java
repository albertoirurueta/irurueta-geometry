/**
 * @file
 * This file contains implementation of
 * com.irurueta.geometry.epipolar.AlgebraicFundamentalMatrixComparator
 * 
 * @author Alberto Irurueta (alberto@irurueta.com)
 * @date April 28, 2015
 */
package com.irurueta.geometry.epipolar;

import com.irurueta.algebra.AlgebraException;
import com.irurueta.algebra.Matrix;
import com.irurueta.algebra.Utils;
import com.irurueta.geometry.GeometryException;
import com.irurueta.geometry.estimators.LockedException;
import com.irurueta.geometry.estimators.NotReadyException;

/**
 * Compares two fundamental matrices using a pure algebraic difference to
 * determine how similar they are.
 * This class simply computes the norm of the difference of both fundamental
 * matrices. The smaller the value the more similar the fundamental matrices
 * will be from a pure algebraic point of view.
 * It must be notice that although there is a tendency to be more similar
 * as the algebraic distance decreases, the value returned by this 
 * implementation has no geometric meaning at all
 */
public class AlgebraicFundamentalMatrixComparator extends 
        FundamentalMatrixComparator{
    
    /**
     * Constructor
     */
    public AlgebraicFundamentalMatrixComparator(){
        super();
    }
    
    /**
     * Constructor
     * @param groundTruthFundamentalMatrix fundamental matrix to be considered
     * as ground truth to compare against
     * @param otherFundamentalMatrix other fundamental matrix being compared
     */
    public AlgebraicFundamentalMatrixComparator(
            FundamentalMatrix groundTruthFundamentalMatrix,
            FundamentalMatrix otherFundamentalMatrix){
        super(groundTruthFundamentalMatrix, otherFundamentalMatrix);
    }
    
    /**
     * Constructor
     * @param listener listener to handle events generated by this class
     */
    public AlgebraicFundamentalMatrixComparator(
            FundamentalMatrixComparatorListener listener){
        super(listener);
    }
    
    /**
     * Constructor
     * @param groundTruthFundamentalMatrix fundamental matrix to be considered
     * as ground truth to compare against
     * @param otherFundamentalMatrix other fundamental matrix being compared
     * @param listener listener to handle events generated by this class
     */
    public AlgebraicFundamentalMatrixComparator(
            FundamentalMatrix groundTruthFundamentalMatrix,
            FundamentalMatrix otherFundamentalMatrix,
            FundamentalMatrixComparatorListener listener){
        super(groundTruthFundamentalMatrix, otherFundamentalMatrix, listener);
    }
    

    /**
     * Compares two fundamental matrices and returns the comparison value.
     * Comparison value will depend on the method implemented to compare both
     * fundamental matrices
     * @return comparison value. Typically the smaller the absolute value the
     * more similar the fundamental matrices are
     * @throws NotReadyException if this comparator is not  yet ready to start
     * the comparison
     * @throws LockedException if this instance is locked
     * @throws FundamentalMatrixComparatorException if comparison fails due to
     * some other reason
     */    
    @Override
    public double compare() throws NotReadyException, LockedException, 
            FundamentalMatrixComparatorException {
        if(isLocked()) throw new LockedException();
        if(!isReady()) throw new NotReadyException();
                
        try{
            mLocked = true;
            
            if(mListener != null){
                mListener.onCompareStart(this);            
            }            
            
            mGroundTruthFundamentalMatrix.normalize();
            mOtherFundamentalMatrix.normalize();
            
            Matrix F1 = mGroundTruthFundamentalMatrix.getInternalMatrix();
            Matrix F2 = mOtherFundamentalMatrix.getInternalMatrix();
                            
            Matrix diff = F1.subtractAndReturnNew(F2);
            Matrix sum = F1.addAndReturnNew(F2);
            
            double normDiff = Utils.normF(diff);
            double normSum = Utils.normF(sum);
            
            if(normDiff > 1.0) normDiff = 2.0 - normDiff;
            if(normSum > 1.0) normSum = 2.0 - normSum;
            
            if(mListener != null){  
                mListener.onCompareEnd(this);
            }
        
            return normDiff < normSum ? normDiff : normSum;
            
        }catch(AlgebraException e){
            throw new FundamentalMatrixComparatorException(e);
        }catch(GeometryException e){
            throw new FundamentalMatrixComparatorException(e);
        }finally{
            mLocked = false;
        }        
    }

    /**
     * Returns type of comparator
     * @return type of comparator
     */    
    @Override
    public FundamentalMatrixComparatorType getType() {
        return FundamentalMatrixComparatorType.ALGEBRAIC_COMPARATOR;
    }    
}
